# hadolint ignore=DL3008# syntax=docker/dockerfile:1
# ActiveMQ Artemis

##########################################################
## Build Image                                           #
##########################################################

# Use an official JRE image as builder and layer the JRE onto a non-JRE OS container as build
ARG JRE_IMAGE
ARG BASE_IMAGE
# hadolint ignore=DL3006
FROM $JRE_IMAGE as builder

ARG ACTIVEMQ_ARTEMIS_VERSION
ARG ACTIVEMQ_DISTRIBUTION_URL
ENV ACTIVEMQ_ARTEMIS_VERSION=$ACTIVEMQ_ARTEMIS_VERSION
ARG DEPENDENCY_VERSIONS
ENV DEPENDENCY_VERSIONS=$DEPENDENCY_VERSIONS

# See https://github.com/hadolint/hadolint/wiki/DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

RUN echo -e "\ngetDependencyVersion () {\n  for version in $DEPENDENCY_VERSIONS ; do if [[ \"\$version\" =~ ^\"\$1\" ]] ; then echo \"\${version#\$1=}\" ; fi ; done\n}" >~/.bld_env && \
    echo MAJ_VER="$(echo "$ACTIVEMQ_ARTEMIS_VERSION" | awk -F"[.]" ' /[0..9]+/ {print $1} ')" >>~/.bld_env && \
    echo SUB_VER="$(echo "$ACTIVEMQ_ARTEMIS_VERSION" | awk -F"[.]" ' /[0..9]+/ {print $2} ')" >>~/.bld_env && \
    apt-get -qq -o=Dpkg::Use-Pty=0 update && \
    apt-get -qq -o=Dpkg::Use-Pty=0 install -y --allow-downgrades --no-install-recommends \
      gpg=2.2.27-3ubuntu2.1 \
      gpg-agent=2.2.27-3ubuntu2.1 \
      ivy=2.5.0-2 \
      wget=1.21.2-2ubuntu1

# hadolint ignore=DL3008
RUN apt-get -qq -o=Dpkg::Use-Pty=0 install -y --no-install-recommends ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Uncompress and validate
WORKDIR /opt
RUN if (echo "${ACTIVEMQ_DISTRIBUTION_URL}" | grep -Eq  ".zip\$" ) ; \
    then \
      mkdir -p tmp && \
      wget "${ACTIVEMQ_DISTRIBUTION_URL}" -P tmp/ && \
      unzip -d tmp -q "tmp/*.zip" && rm -f tmp/*.zip && ls -l tmp/ && \
        mv tmp/* ./apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION} && \
        ln -s "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}" "/opt/apache-artemis" && \
        rmdir tmp; \
    elif test -n "${ACTIVEMQ_DISTRIBUTION_URL}" ; \
    then \
      echo "Only .zip format is supported when using ACTIVEMQ_DISTRIBUTION_URL" && \
      exit 2; \
    else \
      wget "https://repository.apache.org/content/repositories/releases/org/apache/activemq/apache-artemis/${ACTIVEMQ_ARTEMIS_VERSION}/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz" \
         "https://repository.apache.org/content/repositories/releases/org/apache/activemq/apache-artemis/${ACTIVEMQ_ARTEMIS_VERSION}/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc" \
         "https://downloads.apache.org/activemq/KEYS" && \
      gpg --no-tty --import "./KEYS" && \
      gpg --no-tty "./apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc" && \
      tar xfz "./apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz" && \
      ln -s "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}" "/opt/apache-artemis" && \
      rm -f "apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz" "KEYS" "apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}-bin.tar.gz.asc"; \
   fi

# Create broker instance
WORKDIR /var/lib
RUN  "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/bin/artemis" create artemis \
        --home /opt/apache-artemis \
        --user artemis \
        --password simetraehcapa \
        --role amq \
        --require-login \
        --cluster-user artemisCluster \
        --cluster-password simetraehcaparetsulc


WORKDIR /opt/jgroupskubernetes
RUN . ~/.bld_env && \
    java -jar /usr/share/java/ivy.jar -dependency org.jgroups.kubernetes jgroups-kubernetes \
      "$(getDependencyVersion JGROUPS_KUBERNETES)" -retrieve "[artifact]-[revision](-[classifier]).[ext]" -types jar && \
    rm "jgroups-$(getDependencyVersion JGROUPS_CORE).jar" # Artemis is bundled with a later version

# JsonFormatter to enable JSON logging #148: After v2.26 Artemis uses Log4j2 not JBoss logging
WORKDIR /opt/jsonformatter
RUN . ~/.bld_env && \
    if [[ $MAJ_VER -eq 2 && $SUB_VER -le 26 ]] ; then \
      java -jar /usr/share/java/ivy.jar -dependency org.glassfish javax.json "$(getDependencyVersion JAVAX_JSON)" -retrieve "[artifact]-[revision](-[classifier]).[ext]" -types bundle ; \
    else \
      java -jar /usr/share/java/ivy.jar -dependency org.apache.logging.log4j log4j-layout-template-json "$(getDependencyVersion LOG4J)" -retrieve "[artifact]-[revision](-[classifier]).[ext]" -confs "default,compile" -types jar ; \
    fi

WORKDIR /var/lib/artemis/etc
# Log to tty to enable docker logs container-name
# Add JSON log handler: After v2.26 Artemis uses Log4j2 not JBoss logging
# hadolint ignore=SC2086,SC2016

RUN . ~/.bld_env && \
    if [[ $MAJ_VER -eq 2 && $SUB_VER -le 26 ]] ; then \
      sed -i "s/logger.handlers=.*/logger.handlers=CONSOLE/g" logging.properties && \
      echo "formatter.JSON=org.jboss.logmanager.formatters.JsonFormatter" | tee -a  logging.properties && \
      sed -i "s/-Xbootclasspath\/a:\"\(.*\)\"/-Xbootclasspath\/a:\"\1:\/opt\/apache-artemis\/lib\/javax.json-$(getDependencyVersion JAVAX_JSON).jar\"/g" /var/lib/artemis/bin/artemis ; \
    else \
      echo -e '\n# Console JSON appender\nappender.console_json.type=Console\nappender.console_json.name=console_json\nappender.console_json.layout.type=JsonTemplateLayout\nappender.console_json.layout.eventTemplateAdditionalField[0].type=EventTemplateAdditionalField\nappender.console_json.layout.eventTemplateAdditionalField[0].key=hostName\nappender.console_json.layout.eventTemplateAdditionalField[0].value=${ENV:HOSTNAME}' >>log4j2.properties ; \
    fi && \
    sed -i "s/JAVA_ARGS=\"/JAVA_ARGS=\"-Djava.net.preferIPv4Addresses=true -Djava.net.preferIPv4Stack=true /g" artemis.profile && \
# Ports are only exposed with an explicit argument, there is no need to binding
# the web console to localhost. Note in v2.20 the structure of bootstrap.xml changed.
    sed -i 's#//localhost\:#//0.0.0.0:#' bootstrap.xml && \
# In a similar fashion the jolokia access is restricted to localhost only. Disabling
# this as in the natural environments for the image like Kubernetes this is problematic.
    sed -i 's#\(<restrict>\)#\1\n  <remote>\n    <host>127.0.0.1</host>\n    <host>localhost</host>\n    <host>10.0.0.0/8</host> \
    <host>172.16.0.0/12</host>\n    <host>192.168.0.0/16</host>\n  </remote>#' jolokia-access.xml && \
# Remove any default values for memory in artemis profile in order to let the automatic
# Java ergonomics detection work https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html
    sed -i "s/-Xm[xs][^ \"]*//g" artemis.profile

WORKDIR /opt/jmx-exporter
RUN . ~/.bld_env && JMX_EXPORTER_VERSION="$(getDependencyVersion JMX_EXPORTER)" && \
    wget -v "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/${JMX_EXPORTER_VERSION}/jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar" \
     "https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/${JMX_EXPORTER_VERSION}/jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar.sha1" && \
    echo "$(cat "jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar.sha1")" "jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar" | sha1sum -c - && \
    rm "jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar.sha1" && \
    ln -s "/opt/jmx-exporter/jmx_prometheus_javaagent-${JMX_EXPORTER_VERSION}.jar" "/opt/jmx-exporter/jmx_prometheus_javaagent.jar"

COPY assets/jmx-exporter-config.yaml /opt/jmx-exporter/etc/

##########################################################
## Run Image                                             #
##########################################################
LABEL maintainer="Actively maintained but not actively supported - use at your own risk!"
# hadolint ignore=DL3006
FROM $BASE_IMAGE AS build
ARG ACTIVEMQ_ARTEMIS_VERSION
ARG BASE_IMAGE
ENV ACTIVEMQ_ARTEMIS_VERSION=$ACTIVEMQ_ARTEMIS_VERSION
ENV BASE_IMAGE=$BASE_IMAGE

# Copy eclipse official JRE
ENV JAVA_HOME=/opt/java/openjdk
ENV PATH "${JAVA_HOME}/bin:${PATH}"
COPY --from=builder $JAVA_HOME $JAVA_HOME

# See https://github.com/hadolint/hadolint/wiki/DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# add user and group, install packages for entrypoint script
# hadolint ignore=DL3006,DL3008
RUN groupadd -g 1000 -r artemis && useradd -r -u 1000 -g artemis artemis && \
  apt-get -qq -o=Dpkg::Use-Pty=0 update && \
  apt-get -qq -o=Dpkg::Use-Pty=0 remove curl -y && \
  if [[ ! "$BASE_IMAGE" =~ ^"debian:bookworm-" ]] ; then \
    echo "Only debian:bookworm supported for >= 2.23.0 as base image, not $BASE_IMAGE" && \
    exit 2; \
  fi && \
  apt-get -qq -o=Dpkg::Use-Pty=0 update && \
  apt-get -qq -o=Dpkg::Use-Pty=0 install -y --no-install-recommends \
    libaio1=0.3.113-4 \
    xmlstarlet=1.6.1-3 \
    jq=1.6-2.1 \
    gettext-base=0.21-12 \
    dumb-init=1.2.5-2 \
    procps=2:4.0.2-3 && \
  apt-get -qq -o=Dpkg::Use-Pty=0 install -y --no-install-recommends \
    ca-certificates && \
  rm -rf /var/lib/apt/lists/*

COPY --from=builder "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}" "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}"
COPY --from=builder "/var/lib/artemis" "/var/lib/artemis"
COPY --from=builder "/opt/jmx-exporter" "/opt/jmx-exporter"
COPY --from=builder "/opt/jgroupskubernetes/*" "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/lib/"
COPY --from=builder "/opt/jsonformatter/*" "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}/lib/"

# To enable RESTORE_CONFIGURATION
COPY --from=builder "/var/lib/artemis/etc" "/var/lib/artemis/etc-backup"

RUN ln -s "/opt/apache-artemis-${ACTIVEMQ_ARTEMIS_VERSION}" /opt/apache-artemis && chmod 755 /opt/apache-artemis && \
    chown -R artemis:artemis /var/lib/artemis && \
    chown -R artemis:artemis /opt/jmx-exporter && \
    mkdir -p /opt/assets

RUN chown -R artemis:artemis /opt && \
    chown -R artemis:artemis /var/lib

COPY assets/merge.xslt /opt/assets
COPY assets/enable-jmx.xml /opt/assets
COPY assets/semver2.sh /usr/local/bin/semver

# Web Server
EXPOSE 8161

# JMX Exporter
EXPOSE 9404

# Port for CORE,MQTT,AMQP,HORNETQ,STOMP,OPENWIRE
EXPOSE 61616

# Port for HORNETQ,STOMP
EXPOSE 5445

# Port for AMQP
EXPOSE 5672

# Port for MQTT
EXPOSE 1883

#Port for STOMP
EXPOSE 61613

WORKDIR /var/lib/artemis/bin

USER artemis

RUN mkdir /var/lib/artemis/lock

# Expose some outstanding folders
VOLUME ["/var/lib/artemis/data"]
VOLUME ["/var/lib/artemis/tmp"]
VOLUME ["/var/lib/artemis/etc"]
VOLUME ["/var/lib/artemis/etc-override"]
VOLUME ["/var/lib/artemis/lock"]
VOLUME ["/opt/jmx-exporter/etc-override"]

COPY assets/docker-entrypoint.sh /
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["artemis-server"]
